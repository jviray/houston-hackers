// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String    @id
  username      String    @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  createdGroups Group[] @relation("CreatedBy")

  posts Post[]

  comments Comment[]

  postVotes PostVote[]

  commentVotes CommentVote[]

  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Group {
  id          String  @id
  name        String  @unique
  image       String?
  description String

  creator   User   @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId String

  posts Post[]

  subscribers Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Subscription {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@id([userId, groupId])
}

model Post {
  id      String @id
  title   String
  content Json

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]

  votes PostVote[]

  // Add tags?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id   String @id
  text String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?
  replies   Comment[] @relation("ReplyTo")

  votes CommentVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Vote {
  UP
  DOWN
}

model PostVote {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  type Vote

  @@id([userId, postId])
}

model CommentVote {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  type Vote

  @@id([userId, commentId])
}
